<div class="grid-container">
    <div 
    class="recommendations"
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ section.settings.limit }}"
    >

    {%- if recommendations.performed and recommendations.products_count > 0 -%}

        <div class="grid-x grid-padding-x grid-padding-y">
            {% for product in recommendations.products %}         
                {% render "product-snippet", product: product, classes: "cell medium-4" %}
            {% endfor %}
        </div>

    {%- endif -%}
    </div>
</div>

{% javascript %}
const handleIntersection = (entries, observer) => {
    
  if (!entries[0].isIntersecting) return;
      
  observer.unobserve(productRecommendationsSection);
      
  const url = productRecommendationsSection.dataset.url;
      
  fetch(url)
  .then(response => response.text())
  .then(text => {
    const html = document.createElement('div');
    html.innerHTML = text;
    const recommendations = html.querySelector('.recommendations');
    if (recommendations && recommendations.innerHTML.trim().length) {
      productRecommendationsSection.innerHTML = recommendations.innerHTML;
    }
  })
  .catch(e => {
    console.error(e);
  });
    
};
  
const productRecommendationsSection = document.querySelector('.recommendations');
const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});
observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
{
    "name": "Product Recommendations",
    "tag": "section",
    "class": "product-recommendations",
    "settings": [
        {
            "type": "range",
            "id": "limit",
            "label": "Recommendation limit",
            "min": 1,
            "max": 4,
            "step": 1,
            "default": 4
        }
    ],
    "presets": [
        {
            "category": "Sections",
            "name": "Product Recommendations"
        }
    ]
}
{% endschema %}