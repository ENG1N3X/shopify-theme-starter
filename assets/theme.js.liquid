Shopify.theme = Shopify.theme || {}

Shopify.theme.utils = (function () {
	const showToast = (message, type) => {
		nativeToast({
			message,
			timeout: 5000,
			rounded: true,
			position: "south",
			closeOnClick: true,
			type: typeof type !== "undefined" ? type : "success",
		})
	}

	const init = () => {
		// https://****.myshopify.com/challenge
		if ($(".shopify-challenge__button")) {
			$(".shopify-challenge__button").addClass("primary")
		}

		$(".click").on("click", function (e) {
			e.preventDefault()
		})
	}
	return {
		init,
		showToast,
	}
})()

Shopify.theme.cart = (function () {
	const addItem = (id, quantity = 1) => {
		const cartItems = $("section.cart-ajax .cart-items")
		cartItems.replaceWith(`<div class="loader"></div>`)

		fetch("/cart/add.js", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				items: [
					{
						id: Number(id),
						quantity: quantity,
					},
				],
			}),
		})
			.then((response) => {
				if (!response.ok) {
					if (response.status === 422) {
						throw "Out of Stock!"
					} else if (response.status === 404) {
						throw "Can not find variant!"
					} else {
						throw "Something went wrong. Please reload the page!"
					}
				}
				return response.json()
			})
			.then((data) => {
				toggleCart()
				updateCartHTML("section-ajax-cart")
				Shopify.theme.showToast("Success", "south", "success")
				console.log("/cart/add.js", data)
			})
			.catch((e) => {
				toggleCart()
				updateCartHTML("section-ajax-cart")
				Shopify.theme.showToast(e, "south", "error")
				console.error("/cart/add.js", e)
			})
	}

	const changeItemById = (id, quantity = 0) => {
		const cartItems = $("section.cart-ajax .cart-items")
		cartItems.replaceWith(`<div class="loader"></div>`)

		fetch("/cart/change.js", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ id, quantity }),
		})
			.then((response) => {
				if (!response.ok) {
					if (response.status === 422) {
						throw "Out of Stock!"
					} else if (response.status === 404) {
						throw "Can not find variant!"
					} else {
						throw "Something went wrong. Please reload the page!"
					}
				}
				return response.json()
			})
			.then((data) => {
				if (quantity > 0) {
					let item_quantity = data.items.filter((i) => i.key == id)[0].quantity
					if (quantity != item_quantity) {
						throw "Out of Stock!"
					} else {
						data.customResponseStatus = "Quantity changed"
					}
				} else {
					data.customResponseStatus = "Removed"
				}
				return data
			})
			.then((data) => {
				toggleCart()
				updateCartHTML("section-ajax-cart")
				Shopify.theme.showToast(data.customResponseStatus, "south", "success")
				console.log("/cart/change.js", data)
			})
			.catch((e) => {
				toggleCart()
				updateCartHTML("section-ajax-cart")
				Shopify.theme.showToast(e, "south", "error")
				console.error("/cart/change.js", e)
			})
	}

	const updateCartHTML = (section) => {
		fetch(`/?section_id=${section}`)
			.then((response) => response.text())
			.then((data) => {
				const currentCart = $("section.cart-ajax")
				const updatedCart = $($.parseHTML(data))

				const item_count = updatedCart.find(".item_count").text()

				$(".item_count").text(item_count)
				currentCart.find(".cart-body").replaceWith(updatedCart.find(".cart-body"))

				if (item_count > 0) {
					currentCart.find(".cart-footer a").attr("href", "/checkout")
				} else {
					currentCart.find(".cart-footer a").attr("href", "#!")
				}
				currentCart.find(".cart-footer .total_price").replaceWith(updatedCart.find(".cart-footer .total_price"))
			})
			.catch((e) => {
				console.error(`/?section_id=${section}`, e)
			})
	}

	const toggleCart = () => {
		if (!$("section.cart-ajax").hasClass("active")) {
			$("section.cart-ajax").addClass("active")
			updateCartHTML("section-ajax-cart")
		} else {
			$("section.cart-ajax").removeClass("active")
		}
	}

	if (window.location.href.includes("oc=true")) {
		toggleCart()
		updateCartHTML("section-ajax-cart")
	}

	const init = function () {
		$("[data-add-to-cart]").on("click", function (e) {
			e.preventDefault()
			const formData = {
				items: [
					{
						id: $("input[name='id']:checked").val(),
						quantity: $("input[name='quantity']").val(),
					},
				],
			}
			addToCart(formData)
		})

		$("[data-toggle-cart]").on("click", function (e) {
			e.preventDefault()
			toggleCart()
		})
	}
	return {
		init,
		addItem,
		changeItemById,
		updateCartHTML,
		toggleCart,
	}
})()

Shopify.theme.carouseles = (function () {
	// owl.carousel
	const owlCarouseles = [
			{
				selector: "#slider",
				getSettings: function () {
					return {
						autoplayHoverPause: true,
						navText: ["<span></span>", "<span></span>"],
						margin: 20,
						responsive: {
							1023: {
								loop: $(this.selector).data("loop"),
								autoplay: $(this.selector).data("autoplay"),
								items: $(this.selector).data("items"),
								nav: $(this.selector).data("nav"),
								dots: $(this.selector).data("dots"),
							},
							639: {
								items: 2,
							},
							300: {
								items: 1,
								center: true,
								stagePadding: 50,
								dots: true,
							},
						},
						onInitialized: function (event) {
							const target = event.target.id ? event.target.id : event.target.classList[0]
							console.log(`${target} has been initialized.`)
						},
					}
				},
			},
		],
		initializeOwlCarousel = (carousel) => ($(carousel.selector).length > 0 ? $(carousel.selector).owlCarousel(carousel.getSettings()) : false)
	reInitializeOwlCarousel = (selector) => {
		$(selector).trigger("destroy.owl.carousel")
		initializeOwlCarousel(owlCarouseles.filter((carousel) => carousel.selector == selector)[0])
	}

	const init = function () {
		owlCarouseles.forEach(initializeOwlCarousel)
	}
	return {
		init,
		reInitializeOwlCarousel,
	}
})()

Shopify.theme.customizer = (function () {
	if (Shopify.designMode) {
		document.addEventListener("shopify:section:load", function (event) {
			console.log("shopify:section:load triggered.")
			if ($(event.target).hasClass("main-product")) {
				Shopify.theme.carouseles.reInitializeOwlCarousel("#slider")
			}
		})
		// document.addEventListener("shopify:section:unload", function (event) {
		// 	console.log("shopify:section:unload triggered.")
		// })
		// document.addEventListener("shopify:section:select", function (event) {
		// 	console.log("shopify:section:select triggered.")
		// })
		// document.addEventListener("shopify:section:deselect", function (event) {
		// 	console.log("shopify:section:deselect triggered.")
		// })
		// document.addEventListener("shopify:section:reorder", function (event) {
		// 	console.log("shopify:section:reorder triggered.")
		// })
		// document.addEventListener("shopify:block:select", function (event) {
		// 	console.log("shopify:block:select triggered.")
		// })
		// document.addEventListener("shopify:block:deselect", function (event) {
		// 	console.log("shopify:block:deselect triggered.")
		// })
	}
})()

Shopify.theme.init = function () {
	Shopify.theme.utils.init()
	Shopify.theme.cart.init()
	Shopify.theme.carouseles.init()
}

$(function () {
	Shopify.theme.init()
})
